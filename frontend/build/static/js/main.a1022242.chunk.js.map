{"version":3,"sources":["Text.js","resources/ping.mp3","resources/cross.jpg","App.js","index.js"],"names":["font","THREE","parse","fontJson","geom","map","number","size","height","Text","color","children","props","array","useMemo","dispose","char","index","position","length","geometry","parseInt","attach","transparent","opacity","ping","Audio","pingSound","useStore","create","set","count","welcome","api","pong","velocity","currentTime","volume","clamp","play","state","reset","Paddle","useLoader","GLTFLoader","nodes","materials","console","log","model","useRef","useBox","type","args","onCollide","e","contact","impactVelocity","ref","values","useFrame","current","lerp","mouse","x","Math","PI","y","rotation","scale","toString","object","Bone","Bone003","Bone006","Bone010","castShadow","receiveShadow","material","glove","arm","skeleton","wood","mesh","side","mesh_1","foam","mesh_2","lower","mesh_3","upper","mesh_4","Ball","earthImg","useSphere","mass","ContactGround","usePlane","onClick","useCallback","shadows","camera","fov","intensity","angle","penumbra","iterations","tolerance","defaultContactMaterial","friction","restitution","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","gravity","allowSleep","fallback","className","style","display","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.a1022242.chunk.js","sourcesContent":["import * as THREE from \"three\"\nimport React, { useMemo } from \"react\"\nimport fontJson from \"./resources/firasans_regular.json\"\n\nconst font = new THREE.FontLoader().parse(fontJson)\nconst geom = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].map(number => new THREE.TextGeometry(number, { font, size: 5, height: 0.1 }))\n\nexport default function Text({ color, children, ...props }) {\n  const array = useMemo(() => [...children], [children])\n  return (\n    <group {...props} dispose={null}>\n      {array.map((char, index) => (\n        <mesh position={[-(array.length / 2) * 3.5 + index * 3.5, 0, 0]} key={index} geometry={geom[parseInt(char)]}>\n          <meshBasicMaterial attach=\"material\" color={color} transparent opacity={0.5} />\n        </mesh>\n      ))}\n    </group>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/ping.a0246f13.mp3\";","export default __webpack_public_path__ + \"static/media/cross.ff426a15.jpg\";","// react-three-fiber is a way to express threejs declaratively: https://github.com/react-spring/react-three-fiber\nimport { Canvas, useFrame, useLoader } from \"@react-three/fiber\"\n// use-cannon is a hook around the cannon.js physics library: https://github.com/react-spring/use-cannon\nimport { Physics, useSphere, useBox, usePlane } from \"@react-three/cannon\"\n// zustand is a minimal state-manager: https://github.com/react-spring/zustand\nimport create from \"zustand\"\n\nimport * as THREE from \"three\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport React, { Suspense, useRef, useCallback } from \"react\"\nimport lerp from \"lerp\"\nimport clamp from \"lodash-es/clamp\"\nimport Text from \"./Text\"\nimport pingSound from \"./resources/ping.mp3\"\nimport earthImg from \"./resources/cross.jpg\"\n\n// Create a store ...\nconst ping = new Audio(pingSound)\nconst useStore = create((set) => ({\n  count: 0,\n  welcome: true,\n  api: {\n    pong(velocity) {\n      ping.currentTime = 0\n      ping.volume = clamp(velocity / 20, 0, 1)\n      ping.play()\n      if (velocity > 4) set((state) => ({ count: state.count + 1 }))\n    },\n    reset: (welcome) => set((state) => ({ welcome, count: welcome ? state.count : 0 })),\n  },\n}))\n\n// The paddle was made in blender and auto-converted to JSX by https://github.com/react-spring/gltfjsx\nfunction Paddle() {\n  // Load the gltf file\n  const { nodes, materials } = useLoader(GLTFLoader, \"/pingpong.glb\")\n  console.log('test2');\n  console.log('test3');\n  // Fetch some reactive state\n  const { pong } = useStore((state) => state.api)\n  const welcome = useStore((state) => state.welcome)\n  const count = useStore((state) => state.count)\n  const model = useRef()\n  // Make it a physical object that adheres to gravitation and impact\n  const [ref, api] = useBox(() => ({ type: \"Kinematic\", args: [3.4, 1, 3.5], onCollide: (e) => pong(e.contact.impactVelocity) }))\n  // use-frame allows the component to subscribe to the render-loop for frame-based actions\n  let values = useRef([0, 0])\n  useFrame((state) => {\n    // The paddle is kinematic (not subject to gravitation), we move it with the api returned by useBox\n    values.current[0] = lerp(values.current[0], (state.mouse.x * Math.PI) / 5, 0.2)\n    values.current[1] = lerp(values.current[1], (state.mouse.x * Math.PI) / 5, 0.2)\n    api.position.set(state.mouse.x * 10, state.mouse.y * 5, 0)\n    api.rotation.set(0, 0, values.current[1])\n    // Left/right mouse movement rotates it a liitle for effect only\n    model.current.rotation.x = lerp(model.current.rotation.x, welcome ? Math.PI / 2 : 0, 0.2)\n    model.current.rotation.y = values.current[0]\n  })\n  return (\n    <mesh ref={ref} dispose={null}>\n      <group ref={model} position={[-0.05, 0.37, 0.3]} scale={[0.15, 0.15, 0.15]}>\n        <Text rotation={[-Math.PI / 2, 0, 0]} position={[0, 1, 2]} size={1} children={count.toString()} />\n        <group rotation={[1.88, -0.35, 2.32]} scale={[2.97, 2.97, 2.97]}>\n          <primitive object={nodes.Bone} />\n          <primitive object={nodes.Bone003} />\n          <primitive object={nodes.Bone006} />\n          <primitive object={nodes.Bone010} />\n          <skinnedMesh castShadow receiveShadow material={materials.glove} material-roughness={1} geometry={nodes.arm.geometry} skeleton={nodes.arm.skeleton} />\n        </group>\n        <group rotation={[0, -0.04, 0]} scale={[141.94, 141.94, 141.94]}>\n          <mesh castShadow receiveShadow material={materials.wood} geometry={nodes.mesh.geometry} />\n          <mesh castShadow receiveShadow material={materials.side} geometry={nodes.mesh_1.geometry} />\n          <mesh castShadow receiveShadow material={materials.foam} geometry={nodes.mesh_2.geometry} />\n          <mesh castShadow receiveShadow material={materials.lower} geometry={nodes.mesh_3.geometry} />\n          <mesh castShadow receiveShadow material={materials.upper} geometry={nodes.mesh_4.geometry} />\n        </group>\n      </group>\n    </mesh>\n  )\n}\n\nfunction Ball() {\n  // Load texture (the black plus sign)\n  const map = useLoader(THREE.TextureLoader, earthImg)\n  // Make the ball a physics object with a low mass\n  const [ref] = useSphere(() => ({ mass: 1, args: 0.5, position: [0, 5, 0] }))\n  return (\n    <mesh castShadow ref={ref}>\n      <sphereBufferGeometry attach=\"geometry\" args={[0.5, 64, 64]} />\n      <meshStandardMaterial attach=\"material\" map={map} />\n    </mesh>\n  )\n}\n\nfunction ContactGround() {\n  // When the ground was hit we reset the game ...\n  const { reset } = useStore((state) => state.api)\n  const [ref] = usePlane(() => ({ type: \"Static\", rotation: [-Math.PI / 2, 0, 0], position: [0, -10, 0], onCollide: () => reset(true) }))\n  return <mesh ref={ref} />\n}\n\nexport default function () {\n  const welcome = useStore((state) => state.welcome)\n  console.log('test')\n  const { reset } = useStore((state) => state.api)\n  const onClick = useCallback(() => welcome && reset(false), [welcome, reset])\n  return (\n    <div onClick={onClick}>\n      <Canvas shadows camera={{ position: [0, 5, 12], fov: 50 }}>\n        <color attach=\"background\" args={[\"#171720\"]} />\n        <ambientLight intensity={0.5} />\n        <pointLight position={[-10, -10, -10]} />\n        <spotLight\n          position={[10, 10, 10]}\n          angle={0.4}\n          penumbra={1}\n          intensity={1}\n          castShadow\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-bias={-0.0001}\n        />\n        <Physics\n          iterations={20}\n          tolerance={0.0001}\n          defaultContactMaterial={{\n            friction: 0.9,\n            restitution: 0.7,\n            contactEquationStiffness: 1e7,\n            contactEquationRelaxation: 1,\n            frictionEquationStiffness: 1e7,\n            frictionEquationRelaxation: 2,\n          }}\n          gravity={[0, -40, 0]}\n          allowSleep={false}>\n          <mesh position={[0, 0, -10]} receiveShadow>\n            <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n            <meshPhongMaterial attach=\"material\" color=\"#374037\" />\n          </mesh>\n          <ContactGround />\n          {!welcome && <Ball />}\n          <Suspense fallback={null}>\n            <Paddle />\n          </Suspense>\n        </Physics>\n      </Canvas>\n      <div className=\"startup\" style={{ display: welcome ? \"block\" : \"none\" }}>\n        * click to start ...\n      </div>\n    </div>\n  )\n}\n","import { render } from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport \"./styles.css\"\n\nrender(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}